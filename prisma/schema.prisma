// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum UserRole {
  Admin
  Membre
  Invite
}

enum UserStatus {
  Actif
  Inactif
}

enum Civilities {
Monsieur 
Madame
Mademoiselle 
Partenaire
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id                String   @id @default(cuid())
  sessionToken      String   @unique @map("session_token")
  userId            String   @map("user_id")
  expires           DateTime
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
model User {
  id                  String    @id @default(cuid())
  name                String?
  email               String?   @unique
  emailVerified       DateTime? @map("email_verified")
  password            String?
  image               String?
  accounts            Account[]
  sessions            Session[]
  adherent            Adherent?
  role                UserRole  @default(Membre)
  status              UserStatus @default(Inactif)

  lastLogin           DateTime? @updatedAt
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  remember_token      String?      @db.VarChar(100)
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
 
  @@map("users")
}
 
model VerificationToken {
  id          String     @id @default(cuid())
  email       String
  token       String     @unique
  expires     DateTime
 
  @@unique([email, token])
  @@map("verification_tokens")
}

model PasswordResetToken {
  id              String   @id @default(cuid())
  email           String
  token           String   @unique
  expires         DateTime

  @@unique([email, token])
} 


model TwoFactorToken {
  id            String @id @default(cuid())
  email         String
  token         String @unique
  expires       DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id          String @id @default(cuid())
  userId      String
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([userId])
}


model Adherent {
  id                      String  @id @default(cuid())
  civility                Civilities?   @default(Monsieur) 
  firstname               String       @db.VarChar(255)
  lastname                String       @db.VarChar(255)
  departement_id          Int
  Adresse                 Adresse[]
  sous_departement_id     Int          @default(0)
  created_at              DateTime?    @db.Timestamp(0)
  updated_at              DateTime?    @db.Timestamp(0)
  userId                  String       @unique
  User                    User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
}

model Adresse {
  id              String    @id @default(cuid())
  adherentId      String
  streetnum       String? 
  street1         String?  
  street2         String?     
  codepost        String?  
  city            String?
  country         String?   
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
 
  Adherent    Adherent     @relation(fields: [adherentId], references: [id], onDelete: Cascade)
    
}

